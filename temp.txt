Merge two commits into one.



This is an update of the [stackoverflow_answer](http://stackoverflow.com/a/2568581/2351696)

Say your history is

    $ git log --pretty=oneline
    a931ac7c808e2471b22b5bd20f0cad046b1c5d0d c
    b76d157d507e819d7511132bdb5a80dd421d854f b
    df239176e1a2ffac927d8b496ea00d5488481db5 a

That is, a was the first commit, then b, and finally c.

Running `git rebase --interactive HEAD~2` gives you an editor with

    pick b76d157 b
    pick a931ac7 c

    # Rebase df23917..a931ac7 onto df23917
    #
    # Commands:
    #  p, pick = use commit
    #  r, reword = use commit, but edit the commit message
    #  e, edit = use commit, but stop for amending
    #  s, squash = use commit, but meld into previous commit
    #  f, fixup = like ""squash"", but discard this commit's log message
    #
    # If you remove a line here THAT COMMIT WILL BE LOST.
    # However, if you remove everything, the rebase will be aborted.
   

**Note:**You cannot change the newest commit(b's) `pick` to `squash`.
You squash old commits(for eg: c),ie:

    pick b76d157 b
    s a931ac7 c

and save-quitting your editor, you'll get another editor whose contents are

    # This is a combination of 2 commits.
    # The first commit's message is:

    b

    # This is the 2nd commit message:

    c

When you save and quit, the contents of the edited file become commit message of the new combined commit:

    $ git log --pretty=oneline
    18fd73d3ce748f2a58d1b566c03dd9dafe0b6b4f b and c
    df239176e1a2ffac927d8b496ea00d5488481db5 a"
Creating a Custom TEMPLATE_CONTEXT_PROCESSORS in Django.



### a sample TEMPLATE_CONTEXT_PROCESSORS

add a file say `custom_processors.py` to any of your app with these codes:

    def my_view(request):        
        return {
            'say_hello':""Hello"",
        }

add it to `settings.py` `TEMPLATE_CONTEXT_PROCESSORS` like:

    TEMPLATE_CONTEXT_PROCESSORS=(
        ...
        '<appname>.custom_processors.my_view',
    )

if there isn't any `TEMPLATE_CONTEXT_PROCESSORS` variable in `settings.py` then import and append it:

    from django.conf.global_settings import TEMPLATE_CONTEXT_PROCESSORS
    TEMPLATE_CONTEXT_PROCESSORS += ('<appname>.custom_processors.my_view',)

Now you can use `{{say_hello}}` in any of your template. It just output `Hello`"
Generate special mathematical symbols and formulae in HTML.



Today I am going to write about how to put mathematical formulas into html.

I found most people solve this problem by create images of the formulas and put that image in appropriate places by tag `<img>`. 

That is a bad approach, since 

+ it is hard to store images.
+ Loading time will be very slow
+ hard to edit the formulas

So I searched and find a wonderful java-script library  [**Mathjar**](http://www.mathjax.org/).

Here a basic [jsfiddel demo](http://jsfiddle.net/sgJ59/)"
simple jquery SELECT2 ajax example



please refer: [this](http://www.southcoastweb.co.uk/jquery-select2-ajax-tutorial/) and [this so answer](http://stackoverflow.com/a/18497409/2351696)

## urls.py

    url(r'^ajax/(pincodes)/$','ajax_requests'),

## view.py

    def ajax_requests(request,param):
        if param=='pincodes':
            q=request.GET['q']
            resp=[dict(id=c.pk,text=c.code_postal) for c in Pincode.objects.filter(code_postal__contains=q)[:10]]
            return HttpResponse(json.dumps(resp), content_type=""application/json"")    

## template.html

    <link rel=""stylesheet"" type=""text/css"" href=""{% static ""select2/select2.css"" %}"">
    <script src=""{% static ""select2/select2.js"" %}""></script>

    <script type=""text/javascript""> 
    $(document).ready(function () {
      var $cmb_multi = $('#id_code_postal_immo');  
      $cmb_multi.removeClass('form-control');  
      $cmb_multi.select2({
        multiple: true,
        placeholder: ""Pick Postal codes"",
        minimumInputLength: 2,
        ajax: {
          url: ""/frontprop/ajax/pincodes/"",
          dataType: 'json',
          data: function (term, page) {
            return { q: term};
          },
          results: function (data, page) {
            return { results: data };
          }
        }
      });
    });
    </script>"
git add files to last commit



If you ever find that you accidentally left something out of your last commit, be it a file or an extra change to a file that you just committed, don't worry. It can easily be fixed

All you have to do is stage the extra changes like you would for a normal commit:

    git add .

And then just commit with the `--amend` argument.

    git commit --amend

You will be prompted with the previous commit message as a default. save-quitting your editor, You're done.

you can check git graphical tools(like `gitg` or `gitk`) to see your amended commit with the extra changes."
Call External Shell Commands in Python using the subprocess Module,"The subprocess module allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes.
The recommended way to launch `subprocesses` is to use the following convenience functions.

## Call 

To run an external command without interacting with it, Use the call() function. This module intends to replace `os.system`.

    >>> import subprocess
    >>> subprocess.call(['ls', '-1'])
    Bioinformatics.pdf
    bitbucket
    blender-doc.pdf
    ...

## Popen

The underlying process creation and management in this module is handled by the Popen class. It offers a lot of flexibility so that developers are able to handle the less common cases not covered by the convenience functions.
This is intended as a replacement for `os.popen`.

    >>> subprocess.Popen(['ls','-l'])"
Django messages: A user-to-user messaging system for Django



## Introduction

[Django-messages](https://github.com/arneb/django-messages) enables your users to send private messages to each other. 

Every user has an

* Inbox
* Compose Message
* Outbox
* Trash 

Messages can be composed and there is an easy, url-based approach to preloading the compose-form with the recipient-user, which makes it extremely easy to put ""send xyz a message"" links on a profile-page.

## Using django-messages

see [this commit](https://github.com/suhailvs/django-messages/commit/2a7879148a4df557e4978440bd5c49f999822689) to take a quick look.

**Install it:**

    pip install django-messages

**Add `django_messages` to the `INSTALLED_APPS` in settings.py:**

    INSTALLED_APPS = (
        ...
        'django_messages',
        ...
    )

**Add urls to `urls.py`**

    urlpatterns = patterns(''
        ...
        (r'^messages/', include('django_messages.urls')),
        ...
    )

**Templates:**
You must have base template with the name `base.html` which defines a `block content` and a `block sidebar`. for eg :

`../templates/base.html`:

    {% block content %}
    {% endblock %}
    <hr>
    {% block sidebar %}
    {% endblock %}

that's it now you can vist **http://localhost:8000/messages/inbox**

## Examples

Here is a very [Basic example](https://github.com/suhailvs/django-messages/tree/master/basic_example). "
Openshift django site hosting and RHC Tool usage: a beginners guide.




## rhc setup using multiple accounts.

    rhc setup -l username1
    rhc app create <appname> <cartridge>    
    rhc account logout
    rhc setup -l username2
    rhc app create mysite python-2.7

## to see the log

    rhc tail <appname>

## a basic rhc `wgi.py` file:

    #!/usr/bin/python
    import os,sys
    os.environ['DJANGO_SETTINGS_MODULE'] = 'poynting.settings'
    sys.path.append(os.path.join(os.environ['OPENSHIFT_REPO_DIR'],'odesk_poynting'))

    virtenv = os.environ['OPENSHIFT_PYTHON_DIR'] + '/virtenv/'
    virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
    try:
        execfile(virtualenv, dict(__file__=virtualenv))
    except IOError:
        pass
    #
    # IMPORTANT: Put any additional includes below this line.  If placed above this
    # line, it's possible required libraries won't be in your searchable path
    #
    from django.core.handlers import wsgi
    application = wsgi.WSGIHandler()

## serve static files:
 
add `static_root` in settings.py::

    STATIC_ROOT = os.path.join(BASE_DIR,<django_app_foldername>,'static_root')

in `urls.py` add:

    from django.conf.urls.static import static
    from django.conf import settings
    urlpatterns = patterns('',
    .......
    )+ static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

then run `python mange.py collectstatic`"
List of Hypertext Transfer Protocol (HTTP) response status codes.



# 2xx Success 

### 200 OK ###

This class of status codes indicates the action requested by the client was received, understood, accepted and processed successfully.

### 201 Created ###

The request has been fulfilled and resulted in a new resource being created.

### 202 Accepted ###

The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place.

### 203 Non-Authoritative Information ###

The server successfully processed the request, but is returning information that may be from another source.

### 204 No Content ###

The server successfully processed the request, but is not returning any content. Usually used as a response to a successful delete request.

### 205 Reset Content ###

The server successfully processed the request, but is not returning any content. Unlike a 204 response, this response requires that the requester reset the document view.

# 3xx Redirection

### 300 Multiple Choices

Indicates multiple options for the resource that the client may follow. 

### 301 Moved Permanently

The requested page has moved to a new URL 

### 302 Found

The requested page has moved temporarily to a new URL 

# 4xx Client Error

### 400 Bad Request

The request cannot be fulfilled due to bad syntax.

### 401 Unauthorized

Similar to ''403 Forbidden'', but specifically for use when authentication is required and has failed or has not yet been provided. 

### 403 Forbidden

The request was a valid request, but the server is refusing to respond to it. 

### 404 Not Found

The requested page could not be found but may be available again in the future

# 5xx: Server Error

### 500 Internal Server Error

A generic error message, given when no more specific message is suitable

## 501 Not Implemented

The server either does not recognize the request method, or it lacks the ability to fulfill the request. "
